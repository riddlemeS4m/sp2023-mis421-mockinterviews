@using sp2023_mis421_mockinterviews.Models.ViewModels
@using sp2023_mis421_mockinterviews.Data.Constants
@using sp2023_mis421_mockinterviews.Models.UserDb;
@using Microsoft.AspNetCore.Identity
@model IndexViewModel
@inject UserManager<ApplicationUser> UserManager

@if (User.Identity.IsAuthenticated)
{
    <h1>Hello, @UserManager.GetUserAsync(User).Result.FirstName</h1>
}

@{
    ViewBag.Title = "Welcome to UA MIS Mock Interviews!";
}

@if(!User.Identity.IsAuthenticated)
{
    <div style="text-align:center">
        <h2>@ViewBag.Title</h2>
    </div>
}

<div id="disruption-banner" style="text-align:center; display:@Model.DisruptionBanner;"> <!--This should be displayed based on globalconfigvars-->
    <p style="background-color:crimson; color:white; font-size: 40px; padding-top:10px;">
        We are currently experiencing some sitewide disruption of services, which will be resolved speedily. We apologize for the inconvenience.
    </p>
</div>

@if (User.Identity.IsAuthenticated)
{
    @*<p style="font-size:20px; text-align:center; padding-top: 10px">
        Our mission is to help students prepare for their upcoming job interviews by <br /> providing a realistic simulation of the interview experience.
    </p>*@
    <p style="font-size:20px; text-align:center; border-bottom: 2px solid black">
        You have successfully signed in. Important information and your current bookings will be shown below.
    </p>
    <br />
    <div id="zoom-link" style="text-align:center; display:@Model.ZoomLinkVisible;"> <!--This should be displayed based on globalconfigvars -->
        <p style="font-size:20px; text-align:center;">
            If you have signed up for a virtual interview, please click the button below when it is time for your interview to start.
        </p>
        <div style="text-align:center;">
            <a class="btn btn-primary ms-2 ms-lg-3" title="Join Zoom Meeting" href=@Model.ZoomLink target="_blank">Join Zoom Meeting</a>
        </div> <!--This link should be changed based on globalconfigvars-->
        <br>
        <p style="font-size:20px; text-align:center; border-bottom:2px solid black">

        </p>
    </div>
}
else
{
    <p style="font-size:20px; text-align:center; padding-top: 10px;" id="homePageText">
            Our mission is to help you prepare for your upcoming job interviews by providing a realistic simulation of the interview experience.
            <br> To get started, please create an account or sign in if you already have one.
    </p>
    <div class="index-image-container">
        <img src="~/images/HewsonHallNewCropped.jpg" alt="Hewson Hall in the spiring" style="width: 80%">
    </div>
}

<div>
    @if (User.Identity.IsAuthenticated && User.IsInRole(RolesConstants.StudentRole))
    {
        @await Html.PartialAsync("_InterviewEventsPartial", Model.StudentScheduledInterviews)
        @await Html.PartialAsync("_VolunteerEventsHomePartial", Model.TimeRangeViewModels)
    }

    @if (User.Identity.IsAuthenticated && User.IsInRole(RolesConstants.InterviewerRole))
    {
        @await Html.PartialAsync("_SignupInterviewerTimeslotsPartial", Model)
    }
</div>


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var timers = document.querySelectorAll('[id^="timer-"]');

            if(timers.length === 0)
            {
                console.log('no timers found');
            }

            timers.forEach(function (timer) {
                var startTimeString = timer.innerText;
                var startTime = new Date(startTimeString).getTime();

                if (isNaN(startTime)) {
                    console.error('Invalid start time:', startTimeString);
                    return; // Skip this timer
                }

                console.log(`Start time: ${startTimeString}`);

                setInterval(function () {
                    var currentTime = new Date().getTime();
                    var elapsedTime = currentTime - startTime;

                    var hours = Math.floor(elapsedTime / (1000 * 60 * 60));
                    var minutes = Math.floor((elapsedTime % (1000 * 60 * 60)) / (1000 * 60));
                    var seconds = Math.floor((elapsedTime % (1000 * 60)) / 1000);

                    var formattedTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

                    timer.innerText = formattedTime;

                    // Change color if elapsed time is over 30 minutes
                    if (minutes >= 30 || hours > 0) {
                        timer.style.color = 'red';
                        timer.style.fontWeight = 'bold';
                    }
                }, 1000);
            });
        });
    </script>
}
