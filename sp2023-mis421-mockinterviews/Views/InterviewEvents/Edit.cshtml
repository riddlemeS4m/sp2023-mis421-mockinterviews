@using sp2023_mis421_mockinterviews.Data;
@using sp2023_mis421_mockinterviews.Data.Constants;
@model sp2023_mis421_mockinterviews.Models.ViewModels.InterviewEventManageViewModel

@{
    ViewData["Title"] = "Edit";
}

@if (User.Identity.IsAuthenticated && User.IsInRole(RolesConstants.AdminRole))
{
    <h1>Assign to @Model.StudentName</h1>

    <hr />
    <div class="row">
        <div class="col-md-4">
            <form asp-action="Edit">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="InterviewEvent.Id" />
                <input type="hidden" asp-for="InterviewEvent.StudentId" />
                <input type="hidden" asp-for="InterviewEvent.TimeslotId" />

                <div class="form-group">
                    <label asp-for="InterviewEvent.Type" class="control-label"></label>
                    <select id="interviewType" asp-for="InterviewEvent.Type" class="form-control" asp-items='@InterviewTypeConstants.GetInterviewTypesOptions()'>
                        <option value="">-- Select One --</option>
                    </select>
                    <span asp-validation-for="InterviewEvent.Type" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="InterviewEvent.Status" class="control-label"></label>
                    @if (Model.InterviewEvent.InterviewerTimeslotId == null)
                    {
                        <select asp-for="InterviewEvent.Status" class="form-control" asp-items='@StatusConstants.GetUnassignedStatusOptions()'>
                            <option value="">-- Select One --</option>
                        </select>
                    }
                    else
                    {
                        <select asp-for="InterviewEvent.Status" class="form-control" asp-items='@StatusConstants.GetCompleteStatusOptions()'>
                            <option value="">-- Select One --</option>
                        </select>
                    }
                    <span asp-validation-for="InterviewEvent.Status" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="InterviewerId" class="control-label"></label>
                    <select id="interviewerId" asp-for="InterviewerId" class="form-control" asp-items="@Model.RequestedInterviewers"></select>
                    <span asp-validation-for="InterviewerId" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="submit" value="Save" class="btn btn-primary" /> | <a asp-action="Index">Back to Home</a>
                </div>
            </form>
        </div>
    </div>
}
else
{
    <h1>Complete @Model.StudentName's Interview</h1>

    <hr />

    <div class="row">
        <div class="col-md-4">
            <form id="main-form" asp-action="Edit">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="InterviewEvent.Id" />
                <input type="hidden" asp-for="InterviewEvent.StudentId" />
                <input type="hidden" asp-for="InterviewEvent.TimeslotId" />

                <div class="form-group" style="visibility:hidden">
                    <label asp-for="InterviewEvent.Type" class="control-label"></label>
                    <select asp-for="InterviewEvent.Type" class="form-control" asp-items='@InterviewTypeConstants.GetInterviewTypesOptions()'>
                        <option value="">-- Select One --</option>
                    </select>
                    <span asp-validation-for="InterviewEvent.Type" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="InterviewEvent.Status" class="control-label"></label>
                    @if (Model.InterviewEvent.InterviewerTimeslotId == null)
                    {
                        <select asp-for="InterviewEvent.Status" class="form-control" asp-items='@StatusConstants.GetUnassignedStatusOptions()'>
                            <option value="">-- Select One --</option>
                        </select>
                    }
                    else
                    {
                        <select asp-for="InterviewEvent.Status" class="form-control" asp-items='@StatusConstants.GetInterviewerCompleteStatusOptions()'>
                            <option value="">-- Select One --</option>
                        </select>
                    }
                    <span asp-validation-for="InterviewEvent.Status" class="text-danger"></span>
                </div>

                <div class="form-group" style="visibility:hidden">
                    <label asp-for="InterviewerId" class="control-label"></label>
                    <select asp-for="InterviewerId" class="form-control" asp-items="@Model.RequestedInterviewers"></select>
                    <span asp-validation-for="InterviewerId" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input id="submit-button" type="submit" value="Save" class="btn btn-primary" /> | <a asp-action="Index" asp-controller="Home">Back to Home</a>
                </div>
            </form>
        </div>
    </div>
}

@*<script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@8.0.0/dist/browser/signalr.min.js"></script>
<script>
    var connection = new signalR.HubConnectionBuilder().withUrl("/interviewhub").build();

    connection.start().catch(function (err)
    {
        return console.error(err.toString());
    });

    var form = document.querySelector("form")
    if(form == null)
    {
        throw new Error("Could not find form");
    }
    else
    {
        form.addEventListener("submit", function (event)
        {
            connection.invoke("SendInterviewEventUpdate", @Model.InterviewEvent.Id).catch(function (err)
            {
                return console.error(err.toString());
            });
            event.preventDefault();
        });
    }
</script>*@

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        $(document).ready(function () {
            $('#interviewType').change(function () {
                var selectedTypeText = $(this).children("option:selected").text();
                var interviewerIdSelect = $('#interviewerId');

                if (selectedTypeText === 'Technical') {
                    populateSelectBox(interviewerIdSelect, @Json.Serialize(Model.TechnicalInterviewers));
                } else if (selectedTypeText === 'Behavioral') {
                    populateSelectBox(interviewerIdSelect, @Json.Serialize(Model.BehavioralInterviewers));
                }
            });

            function populateSelectBox(selectBox, items) {
                // Clear existing options
                selectBox.empty();

                // Add new options based on the received items
                $.each(items, function (index, item) {
                    selectBox.append($('<option>', {
                        value: item.value,
                        text: item.text
                    }));
                });
            }
        });
    </script>
}
